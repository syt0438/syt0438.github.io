<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何用责任链模式优雅的实现数据导入？</title>
      <link href="/2019/04/24/ru-he-yong-ze-ren-lian-mo-shi-you-ya-de-shi-xian-shu-ju-dao-ru/"/>
      <url>/2019/04/24/ru-he-yong-ze-ren-lian-mo-shi-you-ya-de-shi-xian-shu-ju-dao-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="标准的责任链模式"><a href="#标准的责任链模式" class="headerlink" title="标准的责任链模式"></a>标准的责任链模式</h3><h4 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h4><ul><li>创建多个处理对象，将其自由的搭配组装，组成一个处理器链条。</li><li>任务由此链条进行传递，当遇到合适的处理节点时，进行处理。</li><li>由某个节点处理完毕后，任务流程结束。</li></ul><h4 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h4><p><img src="http://pq9gwibp1.bkt.clouddn.com/blog/images//20190424/30gS6ENnmWDB.png?imageslim" alt="标准实现方式的 UML 类图"></p><p><strong>标准模式所涉及到的角色：</strong></p><ul><li>抽象的处理器：负责定义抽象的 doHandle 处理方法, 以及存储下一个处理节点。</li><li>业务的处理器：业务的处理器：负责定义节点具体的业务逻辑。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>结构清晰，代码较为简单</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>不利于动态组合: next 处理节点，耦合在当前节点。</li><li>无法对象重用: 如果一个处理对象，需要组合到多种业务逻辑处理链条中，需要创建多个实例。</li></ul><h3 id="扩展：标准责任链模式，加入责任链的上下文管理对象"><a href="#扩展：标准责任链模式，加入责任链的上下文管理对象" class="headerlink" title="扩展：标准责任链模式，加入责任链的上下文管理对象"></a>扩展：标准责任链模式，加入责任链的上下文管理对象</h3><h4 id="基本定义-1"><a href="#基本定义-1" class="headerlink" title="基本定义"></a>基本定义</h4><ul><li>在标准责任链的基础上，加入责任链的上下文管理对象。</li><li>处理节点的装配，由起始节点转移到了上下文管理对象。</li></ul><h4 id="UML-类图-1"><a href="#UML-类图-1" class="headerlink" title="UML 类图"></a>UML 类图</h4><p><img src="http://pq9gwibp1.bkt.clouddn.com/blog/images//20190424/FFD3D1ivYlsW.png?imageslim" alt="加入责任链的上下文管理对象的 UML 类图"></p><p><strong>标准模式所涉及到的角色：</strong></p><ul><li>责任链管理对象：负责存储实际的处理对象，并负责管理任务的执行流程（任务执行所需要的参数，由该对象负责存储）</li><li>抽象的处理器：负责定义抽象的 doHandle 方法。</li><li>业务的处理器：负责定义节点具体的业务逻辑。</li></ul><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>任务执行链的组合过程清晰。</li><li>不同业务场景下，可复用处理对象。</li></ul><h3 id="功能链"><a href="#功能链" class="headerlink" title="功能链"></a>功能链</h3><h4 id="基本定义-2"><a href="#基本定义-2" class="headerlink" title="基本定义"></a>基本定义</h4><ul><li>任务由处理链的链头开始传递，每个处理节点处理任务的一部分功能。</li><li>由某个处理节点处理完后，继续向下执行。</li><li>一般情况下，当前节点的业务依赖于上一节点的数据处理结果。</li></ul><h4 id="UML-类图-2"><a href="#UML-类图-2" class="headerlink" title="UML 类图"></a>UML 类图</h4><p>类似于标准的责任链模式的扩展模式</p><h4 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h4><ul><li>Servlet 中的 Filter</li><li>MyBatis 中的 Plugin</li></ul><h2 id="实际业务场景"><a href="#实际业务场景" class="headerlink" title="实际业务场景"></a>实际业务场景</h2><p>最近工作中来了一个数据导入的需求，需要同时支持 xls, txt, csv 格式的业务数据导入，且不同文件的数据格式不一致，那么如何优雅的实现数据的导入呢？</p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><p><strong>由于这几种格式，数据处理的业务逻辑一致，所以预期需要达到以下的三点：</strong></p><ol><li>将数据的读取、解析、转换和校验 的过程与业务处理流程分离。</li><li>将数据的读取、解析任务抽取出来，针对不同的数据格式进行不同的处理。</li><li>需要能够灵活的组装任务，已此达到将基础功能与业务解耦的目的。</li></ol><p><strong>综上分析，决定采用标准责任链的变种模式 —— 功能链</strong></p><h3 id="UML-类图-3"><a href="#UML-类图-3" class="headerlink" title="UML 类图"></a>UML 类图</h3><p><img src="http://pq9gwibp1.bkt.clouddn.com/blog/images//20190424/acNtV57hE3vY.png?imageslim" alt="类图"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>由于篇幅有限，仅将关键代码贴出</strong></p><hr><p>功能链的上下文管理对象的抽象接口，负责构造处理器链。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerChain</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 执行任务 */</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 获取上下文参数 */</span>    T <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 添加任务 */</span>    HandlerChain<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">append</span><span class="token punctuation">(</span>Handler handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 移除任务 */</span>    HandlerChain<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">remove</span><span class="token punctuation">(</span>Handler handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用单向链表的方式实现上下文管理对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerChainImpl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">HandlerChain</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Handler<span class="token operator">></span> handlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 控制是否可以重复执行 */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> cyclic<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 执行索引 */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> executeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> T context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cyclic<span class="token punctuation">)</span> <span class="token punctuation">{</span>                executeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> executeIndex <span class="token operator">&lt;</span> handlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Handler <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> handlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>executeIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义抽象的处理器接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 执行任务     * @param chain 任务链     */</span>    <span class="token keyword">void</span> <span class="token function">doTask</span><span class="token punctuation">(</span>HandlerChain chain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过责任链的特性，优雅的实现了 Excel 文件流的打开与关闭。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelReadAndCloseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHandler</span><span class="token punctuation">(</span>HandlerChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExcelDataContext context <span class="token operator">=</span> <span class="token punctuation">(</span>ExcelDataContext<span class="token punctuation">)</span> chain<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Workbook workbook <span class="token operator">=</span> <span class="token function">readExcel</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getExcelWithBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">setWorkbook</span><span class="token punctuation">(</span>workbook<span class="token punctuation">)</span><span class="token punctuation">;</span>            chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserDataImportException</span><span class="token punctuation">(</span><span class="token string">"导入失败："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Excel 文件的数据读取，大体概述。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDataWithExcelReadHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHandler</span><span class="token punctuation">(</span>HandlerChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserImportDataContext context <span class="token operator">=</span> <span class="token punctuation">(</span>UserImportDataContext<span class="token punctuation">)</span> chain<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 概述，读取所有 sheet 表中的所有数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> dataRowStartIndex <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getDataRowStartIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dataRowStartIndex <span class="token operator">&lt;=</span> sheet<span class="token punctuation">.</span><span class="token function">getLastRowNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dataRowStartIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Row next <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>dataRowStartIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">buildDataItem</span><span class="token punctuation">(</span>cellHeadCellRow<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        context<span class="token punctuation">.</span><span class="token function">setDataList</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据导入的业务逻辑代码，大体概述。<br>注：该处理器为最后一步，为了保证后续能够灵活的添加新的任务，因此继续调用 chain.execute() 保证后续执行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataGenerateHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHandler</span><span class="token punctuation">(</span>CustomTaskChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserImportDataContext context <span class="token operator">=</span> <span class="token punctuation">(</span>UserImportDataContext<span class="token punctuation">)</span> chain<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UserDataImportBean<span class="token operator">></span> dataList <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>data <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">generateUser</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token function">generateJob</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">generateRole</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了行为模式中的责任链模式，将传统的 <code>if...else...</code>语句，通过责任链模式进行分离，使得原来大块的臃肿代码，能够按照业务逻辑和功能重新组合执行，以此来降低耦合度，并提高代码的可复用性。</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>可以提高代码的复用性，分离出的独立功能的处理对象，不涉及业务逻辑，因此可以自由的组合来复用该功能。</li><li>可以降低代码的耦合度。</li><li>可以灵活的动态组合功能。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>将大量的 <code>if</code> 逻辑分离出之后，会产生大量细粒度对象。</li><li>标准的责任链模式下，可能会出现整个处理链传递完后，请求依然未被处理的情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18岁程序员的自学之路</title>
      <link href="/2019/04/20/18-sui-cheng-xu-yuan-de-zi-xue-zhi-lu/"/>
      <url>/2019/04/20/18-sui-cheng-xu-yuan-de-zi-xue-zhi-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓成功，就是不断的经历失败，并且始终保持热情。——丘吉尔</p></blockquote><h2 id="不良少年的寻梦路"><a href="#不良少年的寻梦路" class="headerlink" title="不良少年的寻梦路"></a>不良少年的寻梦路</h2><p>2016年，人生发生了重大的改变。<br>在步入19岁之前，终于功夫不负有心人，找到了人生中第一份工作（10K）。</p><p>当初，上初中的时候，因为不认真读书，整天沉迷于游戏世界。最终导致我中考没有考好，以致于连成都市最差的高中都没有考上。最后还是我的爸爸，帮我在老家找了一所高中，让我读书。</p><p>从此离家千里，开始了我人生中最颓废，最放纵的时光。每天上课就开始睡觉，下课就开始和同学嬉戏打闹，晚上放了学就和同学翻墙出去，通宵打游戏，每天如此，惶惶度日。</p><p>直到有一天，看到《新上海滩》中，冯敬尧对丁力说得一段话</p><blockquote><p><strong>穷人最缺什么？</strong></p><p><strong>野心！穷人最缺的是成为人上人的野心！</strong></p><p>这个世道就是这样，弱肉强食，嫌贫爱富，没有什么道理可讲，道理都是强权者定的，老天安排你是个穷人，你如果认命，你就会穷一辈子，一辈子让有钱人踩在脚下，耍你戏弄你，你不认命，就得靠你自己。——冯敬尧</p></blockquote><p>从这时开始，我决定发愤图强，再也不能这样惶惶度日了。经过三天的思考，我下定决心退学，离开这个城市，寻找一条适合自己的人生道路。</p><p>当然在寻找自己的人生路中，会遇到很多的挫折和岔路。</p><p>刚开始我决定，在家把初中的课程，全部复习一遍，再考一次高中。无奈欠下的内容已经太多，如果全部重新学过，路又太过漫长，因此就没有坚持下去。</p><p>后来突然想起，我在初中时候，学过几天Flash。在经过两天的接触后，我发现我对计算机充满了无限好奇和探索的欲望。从此我知道我已经找到属于我的那条人生路了。</p><p>你们猜对了，刚开始自学的时候，确实是没有坚毅力。每天早上依然喜欢睡懒觉，到了学习有困难的时候，依然喜欢打游戏。</p><p>直到有一天，我开始痛恨自己，我决心改变。</p><hr><h2 id="时光轴"><a href="#时光轴" class="headerlink" title="时光轴"></a>时光轴</h2><p>2013年3月2日，正式开始学习软件编程。</p><p>2013年3月15日起，每天早上5点半起床看书，我看的第一本书《毕业三年要挣一百万》，通过这本书，我逐渐培养起了自己晨起读书的习惯。</p><p>2013年9月12日，开始下定决心跑步，每天跑步7公里，风雨无阻，以磨练意志力。最拼的一次是发着烧，下着雨，也依然坚持跑步。</p><p>可能有很多朋友会说，既然生病了，就不要跑了。可是我想说的是，对我而言，跑步并不是全为了锻炼身体，更重要的是磨练自身的毅力。说到这里，想和大家分享一下禅宗中讲得行悟</p><blockquote><p>禅宗讲：真正的修炼有四种方法，信悟、解悟、行悟、证悟。</p><p>所谓行悟，就是说：悟道，不在于空谈，而在于力行。<br>在这里想分享一个唐三藏西天取经的故事。</p><p>唐三藏（俗家名字，陈恢），立志要去西天取经，所有人都觉得，万里之遥，你怎么去？</p><p>但是你知道人家玄奘法师怎么去，第一，为了练习走路，每天日行百里，风吹日晒雨淋，不管今天身体怎么样，都必须要走过一百里来回，你想想，大冷天发着烧，高烧成那样，水米不打牙，都要日行百里。</p><p>第二件事更了不起，有人说去西天取经，要过大沙漠，没有食物，没有水你怎么办?</p><p>三藏说我练，不吃东西不喝水，从一天练到五天，从五天练到十天，人家可以十天不吃东西不喝水，日行百里有了这个决心才修成正果。</p><p>所以说很多事情并不是我们没有条件，而是因为我们没有决心，下决心才是最重要的，只要你觉得对那就去做，不要犹豫。</p></blockquote><p>2013年10月，我经过了5个月，每天三个小时的学习，终于将孙子兵法全部看完背过。</p><p>2014年1月，我已经深深的迷上了历史，在某东上买了一套中华书局精装版的《资治通鉴》，司马光曾自言：“修《通鉴》成，惟王胜借之一读，他人读未尽一纸，已欠伸思睡”。</p><p>2014年7月，开始练习散打。</p><p>2015年6月，终于将C#学完，找到了我第一份正式的工作。</p><p>2015年8月，不幸公司破产，由于国内的软件环境，我决心从C#转向JAVA开发。</p><p>2015年8月，正式开始学习JAVA。</p><p>2016年2月，经过半年的学习，成功转入JAVA开发。期间投递简历12份，面试11家公司，成功拿到了5份offer，正式开始了我第一份JAVA工作。</p><p>2017年1月15日，跑步时，遇见一名中年男子对女孩下药后，欲行不轨，一番决心之后，挺身而出，见义勇为。</p><hr><h2 id="自学真的很难！"><a href="#自学真的很难！" class="headerlink" title="自学真的很难！"></a>自学真的很难！</h2><p><strong> 自学的难度的确较大，尤其是在自学的初期，在这个阶段由于对整个知识体系的认知不足，定会导致思想上的恐惧从而萌发出放弃的想法，此时如果没有坚定的信念，那么自学便极有可能失败。 </strong></p><h3 id="自学的迷茫"><a href="#自学的迷茫" class="headerlink" title="自学的迷茫"></a>自学的迷茫</h3><p>2013年4月15日，经过了一个多月的学习，终于将基本内容学习完，并能够做一些简单的动画效果了。可是这时对于没有绘画功底的我彻底的迷茫了，我不知道接下来应该做些什么，Flash是否真的适合于我。在经过了一段时间思索之后，我决定开始学习编程。</p><p>2013年4月20日，开始学习C语言，可没有想到一天就遇到了难题，对于连26个字母都无法完整背出我，一看到那么多的英文单词当时就头晕了。后来我想到了个最笨的方法，就是对于每个见到的单词，都用有道词典打出来，每见一次都要打五次，就这样最终解决了我懂英语的苦境。</p><h3 id="学习态度"><a href="#学习态度" class="headerlink" title="学习态度"></a>学习态度</h3><p><strong> 我对学习态度就是，对于学习要保持一颗敬畏之心，敬畏学习是严肃、认真、谨慎的一种学习态度和学习情怀。因为我自始至终将自己设定为全天下最愚钝的人，所以学习的时候，就并没有去试图寻找一种捷径。 </strong></p><p><strong> 因此我最初的学习方法很简单：</strong> </p><pre><code>1. 对于没有学会的知识，晚上专门抽时间，练习5遍以上，直到掌握。2. 对于已经学会的知识，晚上专门抽时间，练习3遍，强化记忆。</code></pre><p>2013年9月，我将C语言和数据结构的知识点学完，并报名了计算机二级考试，最后考试结果大出所料，我只得到了56分。这个消息对于当时的我来说，如同晴天霹雳一般，刻苦学习的半年，被所有人认为我在家是在玩乐。即使没有，也证明了离开老师，自己学习的路是行不通的。</p><p>再一次，我受到了强烈的反对和批评教育。</p><hr><h2 id="放弃？"><a href="#放弃？" class="headerlink" title="放弃？"></a>放弃？</h2><p>当我决定在家自学时，几乎受到了所有人的质疑。所有人都对我父亲说：如果继续这样放纵我，那我的一生就沦丧了。所有的人都在劝我放弃，他们看我的笑话，嘲笑我的梦想。</p><p><img src="http://pq9gwibp1.bkt.clouddn.com/2019_4_21_1.jpg" alt="来源自网络"></p><p>放弃？我的字典里没有这个词！</p><p>当他们放弃时我继续努力。当他们沉睡时，我更加努力。</p><p>当他们说我不行，认为我会放弃时。我证明给他们看，我可以！</p><p>他们嘲笑我的梦想，最终嘲笑的是他们自己。</p><hr><h2 id="呐喊"><a href="#呐喊" class="headerlink" title="呐喊"></a>呐喊</h2><p><img src="http://pq9gwibp1.bkt.clouddn.com/2019_4_21_2.jpg" alt="来源自网络"></p><p>外界强烈的反对，更加激发了我刻苦学习的决心。我开始每天5:30起来看书，晚上12点才休息。我开始强迫自己戒掉打任何的游戏（之前已经戒过网络游戏），并且开始每天晚上跑步5千米，风雨无阻，借此来培养意志力。</p><p>第一次面试</p><p>在做了几个项目以后，开始投递简历。由于当时并不知道拉勾网，就在58上投递了很多份简历，但是接到的几乎全是销售电话。只有2家公司邀我去面试，这让我的信心，顿时受到了莫大的打击。第一家面试的公司，规模很小，加上老板一共只有5个人，没有见到面试官，只是让我做几道已经出好的面试题。可能由于是第一次面试的原因，平时做很简单的几道题，硬是做了2个小时，都没有做出来，直到12点钟，他们吃饭了，我才灰溜溜的离开。</p><p>虽然这一次的面试非常失败，但是我始终相信一句话：“有志者事竟成，苦心人天不负”，在经过一个星期的调整以后，终于成功找到了合适的工作。</p><p>最终，经过半年的刻苦学习，成功转入JAVA开发。期间投递简历12份，面试11家公司，成功拿到了5份offer，正式开始了我第一份JAVA工作。</p><hr><h2 id="寻道"><a href="#寻道" class="headerlink" title="寻道"></a>寻道</h2><p>没有人能够告诉我们应该怎样去生活，生活是我们自己的，我们自己提出的问题应该由自己去回答。</p><p>小时候听过的一个童话故事，相信大多数朋友也都听过，故事叫小马过河</p><blockquote><p>小马要过条河，老牛告诉它，河很浅，你随便过。小松鼠告诉它，河很深，有好几个同伴，下去都淹死了，千万不能过。请问小马过还是不过?</p></blockquote><p><strong> 我想说的是：人生就像一条河，过与不过，不取决于河什么样，而取决于你是谁。如果你要是小马，你就勇敢的过，你适合。但如果你要是小松鼠，你就别过，你不适合。小马不能因为小松鼠的建议，就不过河。小松鼠也不能因为小马过去了自己也要过去。 </strong></p><hr><p>我是梦想追逐者，愿用一生去追逐梦想，永不放弃！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
            <tag> 学习经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变革者——献给所有软件开发自学者</title>
      <link href="/2019/04/19/bian-ge-zhe-xian-gei-suo-you-ruan-jian-kai-fa-zi-xue-zhe/"/>
      <url>/2019/04/19/bian-ge-zhe-xian-gei-suo-you-ruan-jian-kai-fa-zi-xue-zhe/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>真正的改变源于对自己无能的痛恨！</strong></p></blockquote><p>2014年，美国最佳职业排行榜中，软件开发者已经超过医生名列榜首了，程序员也已成为当下最热门的职业之一。</p><p>很多人想成为一名软件开发者，却总是因为一些原因对其望而止步。下面我将从自身经历出发，为大家解答一些常见困惑和担忧。</p><h2 id="自学软件开发三大困惑"><a href="#自学软件开发三大困惑" class="headerlink" title="自学软件开发三大困惑"></a>自学软件开发三大困惑</h2><h3 id="一、没有证书和文凭企业能要吗？"><a href="#一、没有证书和文凭企业能要吗？" class="headerlink" title="一、没有证书和文凭企业能要吗？"></a>一、没有证书和文凭企业能要吗？</h3><p>当初我下定决心在家里自学的时候，有很多人告诉我说：“现在这个社会连大学生找工作都难，你一个初中生既没有证书又没有文凭，这么小的年纪，有哪家企业会要你”。但是我相信有志者事竟成，只要是有能力，没有学历没有文凭也一样能找到工作。</p><p>事实证明，对于程序员这个行业来说，一般公司不看文凭，只要你有能力，文凭根本就不重要，当然如果你有那更好。</p><p>对于证书来说，只有大学毕业需要计算机二级证书，国内计算机所有证书都无用，企业对证书根本就不关心，而且现在国内也根本没有能够证明你能力的证书。</p><h3 id="二、英语和数学不好也能做程序员吗？"><a href="#二、英语和数学不好也能做程序员吗？" class="headerlink" title="二、英语和数学不好也能做程序员吗？"></a>二、英语和数学不好也能做程序员吗？</h3><p>首先对于大多数开发者的工作来说，并不需要什么数学功底，也不会用到多少数学知识。</p><p>对于英语水平差的朋友来说，在学习的前期，可能会非常的痛苦，因为有大量的单词需要记忆，但是学习一段时间以后，就会发现其实做一个项目，能够用到用到的单词也不过几十个而已，不会遇到了有道词典查一查记一记就Ok了。</p><blockquote><p>当然如果你想在软件行业有大的发展，成为技术先驱者，那你就必须要学好英语，因为最前沿的技术几乎都来自美国，而翻译版的书籍往往需要几年的时间才会出现。</p></blockquote><h3 id="三、对自学迷茫和对未来的担忧"><a href="#三、对自学迷茫和对未来的担忧" class="headerlink" title="三、对自学迷茫和对未来的担忧"></a>三、对自学迷茫和对未来的担忧</h3><p>很多自学的朋友都担心，没有在学校里面学习，没有老师教授知识，只靠自己学到的知识，是否和企业里面用到的知识相匹配，自学学出来的能力，是否能够达到企业的标准。</p><p>就这一点来说，只要你选定了方向，并且有毅力能够坚持学下去，那么通过1-2年的学习，就完全能够找到一份适合自己的工作。</p><blockquote><p><strong>对于自学出来的人来说，更加容易接受新知识新技术，这便是因为学习新知识新技术对于我们来说，早已成了家常便饭。</strong></p></blockquote><blockquote><p>天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。<br>人之为学有难易乎？学之，则难者亦易矣；不学，则易者亦难矣。<br><br>技术本身并没有多难，许多问题网上都已有成熟的解决方案。<br>真正阻碍我们前进是懒惰，是安于现状，是不思进取。<br>相信自己，人但有恒，则事无不成。</p></blockquote><h2 id="自学路线"><a href="#自学路线" class="headerlink" title="自学路线"></a>自学路线</h2><p>关于自学的路线，很多人的选择是到谷歌百度博客论坛里面去寻找，但是由于每人的理解认知都不一样，总是会有很多种学习方案。</p><h2 id="学习视频和书籍"><a href="#学习视频和书籍" class="headerlink" title="学习视频和书籍"></a>学习视频和书籍</h2><blockquote><p><strong>初学阶段不建议看书，建议从视频起手，入门以后再提升技术深度。<br><br>不推荐在线教育平台，内容不连贯，项目中运用的知识点涵盖不全面，业务不够复杂，不适合用于未来找工作。</strong></p></blockquote><p><strong>学习书籍推荐：豆瓣读书模块   【技术关键字】，只看8.0以上的书。</strong></p><p><img src="http://pq9gwibp1.bkt.clouddn.com/2019_4_21_3.png" alt="书籍推荐"></p><p>##学习经验</p><ul><li><strong>学习前期，切记不可使用代码自动补全和智能提示</strong>。</li><li>英语<pre><code>1. 将所学技术所用到的关键字和常用API的的英语记住，其它不会的单词，在学习过程中记忆就足以。2. 记忆单词推荐（有道词典）把自动发音打开，每一次遇到不会的单词，都在有道词典中反复输入5遍，直到掌握。</code></pre></li><li>视频课程中的案例<pre><code>1. 对于没有学会的知识，晚上专门抽时间，练习5遍以上，直到掌握。2. 对于已经学会的知识，晚上专门抽时间，练习3遍，强化记忆。</code></pre></li><li>当遇到问题时，不建议通过询问QQ群里某位大神解决，如果遇到问题，那就打断点一步一步的调试解决，实在解决不了，则通过谷歌或百度解决。</li><li>国内对某些网站做了限制，可以通过vpn或者改hosts文件解决（推荐使用hosts文件，方便易用，具体百度查询 老D）。</li><li>技术网站推荐：<pre><code>1.掘金网2.阮一峰的网络日志3.stackoverflow4.Github5.InfoQ6.图灵社区7.博客园和CSDN</code></pre></li></ul><h2 id="学习到什么程度就可以去面试了？"><a href="#学习到什么程度就可以去面试了？" class="headerlink" title="学习到什么程度就可以去面试了？"></a>学习到什么程度就可以去面试了？</h2><p>鬼谷先生说：“阳还终始，阴极反阳”，“上下相成，阴阳相生”。</p><blockquote><p>这里和大家分享一个淮南子中记载的故事：</p><p>蜀之鄙有二僧，其一贫，其一富。贫者语于富者曰：“吾欲之南海，何如？”富者曰：“子何恃而往？”贫者曰：“吾一瓶一钵足矣。”富者曰：“吾数年来欲买舟而下，犹未能也。子何恃而往！”越明年，贫者自南海还，以告富者。富者有惭色。</p></blockquote><p>作者彭端淑就问我们了一个问题？<strong>西蜀之去南海，不知几千里也，为什么僧富者不能至而贫者至焉呢？</strong></p><p>所以我想说的就是，只要一系列入门课程学踏实以后，就可以去找工作了。不要畏缩不前，总想着百分之百得准备好，但是时态是时时变化的，在一定条件下，有准备就会变成无准备。所以切记不要<strong>过度准备，过犹不及</strong>。<br>只要自己觉得准备到了百分之六七十，就可以前进了。然后再在前进中完善自己，在前进中进步。</p><h2 id="简历如何写？"><a href="#简历如何写？" class="headerlink" title="简历如何写？"></a>简历如何写？</h2><p>现在企业招人，都要求有1年以上经验，所以简历上一定要写工作经验（根据能力，1-2年最为合适）。</p><p>（多数中小型公司）对于招聘要求来说，他们的要求除了那些必须会的知识，其它的基本都可以忽略无视，所以大家不要害怕，大胆的去就行了。</p><blockquote><p>望能给还没有入行，却对互联网充满了无限热情的朋友以作参考，希望能够帮助到大家。<br></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
            <tag> 学习经验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
